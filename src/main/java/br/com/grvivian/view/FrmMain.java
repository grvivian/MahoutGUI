package br.com.grvivian.view;

import br.com.grvivian.hibernate.ConfigDB;
import br.com.grvivian.hibernate.HibernateDataModel;
import br.com.grvivian.hibernate.HibernateUtil;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FileUtils;
import org.apache.mahout.cf.taste.common.TasteException;
import org.apache.mahout.cf.taste.eval.IRStatistics;
import org.apache.mahout.cf.taste.eval.RecommenderBuilder;
import org.apache.mahout.cf.taste.eval.RecommenderEvaluator;
import org.apache.mahout.cf.taste.eval.RecommenderIRStatsEvaluator;
import org.apache.mahout.cf.taste.impl.eval.AverageAbsoluteDifferenceRecommenderEvaluator;
import org.apache.mahout.cf.taste.impl.eval.GenericRecommenderIRStatsEvaluator;
import org.apache.mahout.cf.taste.impl.eval.RMSRecommenderEvaluator;
import org.apache.mahout.cf.taste.impl.model.GenericBooleanPrefDataModel;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.impl.neighborhood.ThresholdUserNeighborhood;
import org.apache.mahout.cf.taste.impl.recommender.GenericBooleanPrefItemBasedRecommender;
import org.apache.mahout.cf.taste.impl.recommender.GenericBooleanPrefUserBasedRecommender;
import org.apache.mahout.cf.taste.impl.recommender.GenericItemBasedRecommender;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.impl.recommender.svd.ALSWRFactorizer;
import org.apache.mahout.cf.taste.impl.recommender.svd.SVDRecommender;
import org.apache.mahout.cf.taste.impl.similarity.CityBlockSimilarity;
import org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarity;
import org.apache.mahout.cf.taste.impl.similarity.LogLikelihoodSimilarity;
import org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity;
import org.apache.mahout.cf.taste.impl.similarity.SpearmanCorrelationSimilarity;
import org.apache.mahout.cf.taste.impl.similarity.TanimotoCoefficientSimilarity;
import org.apache.mahout.cf.taste.impl.similarity.UncenteredCosineSimilarity;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.recommender.Recommender;
import org.apache.mahout.cf.taste.similarity.ItemSimilarity;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.query.NativeQuery;

/**
 *
 * @author glaucio
 */
public class FrmMain extends javax.swing.JFrame {

  private static final DecimalFormat DF = new DecimalFormat("#0.0000");
  private final ConfigDB configDB = new ConfigDB();
  private final RecommenderIRStatsEvaluator irStats = new GenericRecommenderIRStatsEvaluator();
  private final RecommenderEvaluator rms = new RMSRecommenderEvaluator();
  private final RecommenderEvaluator mae = new AverageAbsoluteDifferenceRecommenderEvaluator();
  private DataModel model = null;
  private ItemSimilarity is = null;
  private UserSimilarity us = null;
  private UserNeighborhood neighbour = null;
  private ALSWRFactorizer factorizer = null;
  private String[] coluns = null;
  private Object[][] data = null;
  private Class[] types = null;
  private boolean[] canEdit = null;

  /**
   * Creates new form FrmMain
   */
  public FrmMain() {
    initComponents();

    DF.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.ENGLISH));

    cbModel.removeAllItems();
    //cbModel.addItem(JDBCDataModel.class.getSimpleName());
    cbModel.addItem(FileDataModel.class.getSimpleName());
    //cbModel.addItem(GenericPreference.class.getSimpleName());
    //cbModel.addItem(GenericBooleanPrefDataModel.class.getSimpleName());
    cbModel.addItem(HibernateDataModel.class.getSimpleName());

    cbNN.removeAllItems();
    cbNN.addItem(NearestNUserNeighborhood.class.getSimpleName());
    cbNN.addItem(ThresholdUserNeighborhood.class.getSimpleName());

    rbItemBased.setSelected(true);
  }

  private final HashSet<Long> userIds = new HashSet<>();

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroup1 = new javax.swing.ButtonGroup();
    btRun = new javax.swing.JButton();
    rbUserBased = new javax.swing.JRadioButton();
    rbItemBased = new javax.swing.JRadioButton();
    jTabbedPane1 = new javax.swing.JTabbedPane();
    pnDataModel = new javax.swing.JLayeredPane();
    jLabel1 = new javax.swing.JLabel();
    cbModel = new javax.swing.JComboBox();
    jLabel4 = new javax.swing.JLabel();
    btFindFile = new javax.swing.JButton();
    tfModelFile = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    tbPreferences = new javax.swing.JTable();
    pnOptions = new javax.swing.JLayeredPane();
    cbNN = new javax.swing.JComboBox();
    cbSimilarity = new javax.swing.JComboBox();
    lbNN = new javax.swing.JLabel();
    lbSimilarity = new javax.swing.JLabel();
    lbNumOfUsers = new javax.swing.JLabel();
    lbThreshold = new javax.swing.JLabel();
    slThreshold = new javax.swing.JSlider();
    spNumOfUser = new javax.swing.JSpinner();
    jPanel1 = new javax.swing.JPanel();
    jLabel5 = new javax.swing.JLabel();
    slNumOfRecomendations = new javax.swing.JSlider();
    jLabel3 = new javax.swing.JLabel();
    cbRecommendationsToUser = new javax.swing.JComboBox<>();
    lbFeatures = new javax.swing.JLabel();
    spFeatures = new javax.swing.JSpinner();
    lbInterations = new javax.swing.JLabel();
    spInterations = new javax.swing.JSpinner();
    lbLambda = new javax.swing.JLabel();
    pnResults = new javax.swing.JLayeredPane();
    jScrollPane2 = new javax.swing.JScrollPane();
    taOutput = new javax.swing.JTextArea();
    rbBooleanUser = new javax.swing.JRadioButton();
    rbBooleanItem = new javax.swing.JRadioButton();
    rbSVD = new javax.swing.JRadioButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("MahoutGUI");

    btRun.setText("Run");
    btRun.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btRunActionPerformed(evt);
      }
    });

    buttonGroup1.add(rbUserBased);
    rbUserBased.setText("User-Based");
    rbUserBased.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    rbUserBased.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        rbUserBasedItemStateChanged(evt);
      }
    });

    buttonGroup1.add(rbItemBased);
    rbItemBased.setText("Item-Based");
    rbItemBased.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        rbItemBasedItemStateChanged(evt);
      }
    });

    jLabel1.setLabelFor(cbModel);
    jLabel1.setText("Model:");

    cbModel.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        cbModelItemStateChanged(evt);
      }
    });

    jLabel4.setLabelFor(tfModelFile);
    jLabel4.setText("File:");

    btFindFile.setText("...");
    btFindFile.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btFindFileActionPerformed(evt);
      }
    });

    tbPreferences.setModel(new javax.swing.table.DefaultTableModel(
      new Object [][] {

      },
      new String [] {
        "User ID", "Item ID", "Preference"
      }
    ) {
      Class[] types = new Class [] {
        java.lang.Long.class, java.lang.Long.class, java.lang.Double.class
      };
      boolean[] canEdit = new boolean [] {
        false, false, false
      };

      public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
      }

      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
      }
    });
    jScrollPane1.setViewportView(tbPreferences);
    if (tbPreferences.getColumnModel().getColumnCount() > 0) {
      tbPreferences.getColumnModel().getColumn(0).setResizable(false);
      tbPreferences.getColumnModel().getColumn(1).setResizable(false);
      tbPreferences.getColumnModel().getColumn(2).setResizable(false);
    }

    pnDataModel.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnDataModel.setLayer(cbModel, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnDataModel.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnDataModel.setLayer(btFindFile, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnDataModel.setLayer(tfModelFile, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnDataModel.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

    javax.swing.GroupLayout pnDataModelLayout = new javax.swing.GroupLayout(pnDataModel);
    pnDataModel.setLayout(pnDataModelLayout);
    pnDataModelLayout.setHorizontalGroup(
      pnDataModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(pnDataModelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(pnDataModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(pnDataModelLayout.createSequentialGroup()
            .addGroup(pnDataModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel1)
              .addComponent(jLabel4))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnDataModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(pnDataModelLayout.createSequentialGroup()
                .addComponent(tfModelFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btFindFile))
              .addComponent(cbModel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
          .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE))
        .addContainerGap())
    );
    pnDataModelLayout.setVerticalGroup(
      pnDataModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(pnDataModelLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(pnDataModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(cbModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(pnDataModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(btFindFile)
          .addComponent(tfModelFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel4))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
        .addContainerGap())
    );

    jTabbedPane1.addTab("Data Model", pnDataModel);

    cbNN.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        cbNNItemStateChanged(evt);
      }
    });

    lbNN.setLabelFor(cbNN);
    lbNN.setText("Nearest Neighbor:");

    lbSimilarity.setLabelFor(cbSimilarity);
    lbSimilarity.setText("Similarity:");

    lbNumOfUsers.setLabelFor(spNumOfUser);
    lbNumOfUsers.setText("Num. of Users:");
    lbNumOfUsers.setName(""); // NOI18N

    lbThreshold.setLabelFor(slThreshold);
    lbThreshold.setText("Threshold:");

    spNumOfUser.setModel(new javax.swing.SpinnerNumberModel(1, 1, 1, 1));
    spNumOfUser.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Generate Recommendations"));

    jLabel5.setText("to User ID:");

    slNumOfRecomendations.setMinimum(1);
    slNumOfRecomendations.setValue(5);

    jLabel3.setText("Quantity:");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel5)
          .addComponent(jLabel3))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(cbRecommendationsToUser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(slNumOfRecomendations, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel5)
          .addComponent(cbRecommendationsToUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(slNumOfRecomendations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(18, 18, 18)
            .addComponent(jLabel3)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );

    lbFeatures.setText("Features:");

    spFeatures.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

    lbInterations.setText("Interations:");

    spInterations.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

    lbLambda.setText("Lambda:");

    pnOptions.setLayer(cbNN, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(cbSimilarity, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(lbNN, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(lbSimilarity, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(lbNumOfUsers, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(lbThreshold, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(slThreshold, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(spNumOfUser, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(lbFeatures, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(spFeatures, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(lbInterations, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(spInterations, javax.swing.JLayeredPane.DEFAULT_LAYER);
    pnOptions.setLayer(lbLambda, javax.swing.JLayeredPane.DEFAULT_LAYER);

    javax.swing.GroupLayout pnOptionsLayout = new javax.swing.GroupLayout(pnOptions);
    pnOptions.setLayout(pnOptionsLayout);
    pnOptionsLayout.setHorizontalGroup(
      pnOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(pnOptionsLayout.createSequentialGroup()
        .addGroup(pnOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(pnOptionsLayout.createSequentialGroup()
            .addGroup(pnOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(lbNumOfUsers)
              .addGroup(pnOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lbNN)
                .addComponent(lbSimilarity, javax.swing.GroupLayout.Alignment.TRAILING))
              .addComponent(lbFeatures)
              .addComponent(lbThreshold))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(spNumOfUser)
              .addComponent(cbNN, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(cbSimilarity, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(slThreshold, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
              .addGroup(pnOptionsLayout.createSequentialGroup()
                .addComponent(spFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbInterations)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spInterations, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbLambda)
                .addGap(0, 0, Short.MAX_VALUE))))
          .addGroup(pnOptionsLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        .addContainerGap())
    );
    pnOptionsLayout.setVerticalGroup(
      pnOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(pnOptionsLayout.createSequentialGroup()
        .addContainerGap()
        .addGroup(pnOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(cbSimilarity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lbSimilarity))
        .addGap(16, 16, 16)
        .addGroup(pnOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(cbNN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lbNN))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(pnOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(lbNumOfUsers)
          .addComponent(spNumOfUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addGroup(pnOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(slThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addGroup(pnOptionsLayout.createSequentialGroup()
            .addGap(14, 14, 14)
            .addComponent(lbThreshold)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(pnOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(spFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lbInterations)
          .addComponent(spInterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(lbLambda)
          .addComponent(lbFeatures))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );

    jTabbedPane1.addTab("Options", pnOptions);

    taOutput.setColumns(20);
    taOutput.setRows(5);
    jScrollPane2.setViewportView(taOutput);

    pnResults.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

    javax.swing.GroupLayout pnResultsLayout = new javax.swing.GroupLayout(pnResults);
    pnResults.setLayout(pnResultsLayout);
    pnResultsLayout.setHorizontalGroup(
      pnResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(pnResultsLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
        .addContainerGap())
    );
    pnResultsLayout.setVerticalGroup(
      pnResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(pnResultsLayout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
        .addContainerGap())
    );

    jTabbedPane1.addTab("Recommendations Results", pnResults);

    buttonGroup1.add(rbBooleanUser);
    rbBooleanUser.setText("Boolean User");
    rbBooleanUser.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        rbBooleanUserItemStateChanged(evt);
      }
    });

    buttonGroup1.add(rbBooleanItem);
    rbBooleanItem.setText("Boolean Item");
    rbBooleanItem.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        rbBooleanItemItemStateChanged(evt);
      }
    });

    buttonGroup1.add(rbSVD);
    rbSVD.setText("SVD");
    rbSVD.addItemListener(new java.awt.event.ItemListener() {
      public void itemStateChanged(java.awt.event.ItemEvent evt) {
        rbSVDItemStateChanged(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jTabbedPane1)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(btRun, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(rbUserBased)
            .addGap(18, 18, 18)
            .addComponent(rbItemBased)
            .addGap(18, 18, 18)
            .addComponent(rbBooleanUser)
            .addGap(18, 18, 18)
            .addComponent(rbBooleanItem)
            .addGap(18, 18, 18)
            .addComponent(rbSVD)
            .addGap(0, 0, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(rbUserBased)
          .addComponent(rbItemBased)
          .addComponent(rbBooleanUser)
          .addComponent(rbBooleanItem)
          .addComponent(rbSVD))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jTabbedPane1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(btRun)
        .addContainerGap())
    );

    pack();
    setLocationRelativeTo(null);
  }// </editor-fold>//GEN-END:initComponents

  private void addOutput(String t) {
    taOutput.setText(taOutput.getText() + "\n" + t);
  }

  private double toSecureDouble(double d) {
    if (Double.isNaN(d)) {
      return 0D;
    }

    return d;
  }

  private void performRecommendation(List<Long> usersId, int numberOfRecommendation, String type) throws TasteException {
    RecommenderBuilder recommenderBuilder = new RecommenderBuilder() {
      @Override
      public Recommender buildRecommender(DataModel model) throws TasteException {
        if (rbItemBased.isSelected()) {
          return new GenericItemBasedRecommender(model, is);
        } else if (rbBooleanItem.isSelected()) {
          return new GenericBooleanPrefItemBasedRecommender(model, is);
        } else if (rbUserBased.isSelected()) {
          return new GenericUserBasedRecommender(model, neighbour, us);
        } else if (rbBooleanUser.isSelected()) {
          return new GenericBooleanPrefUserBasedRecommender(model, neighbour, us);
        } else if (rbSVD.isSelected()) {
          return new SVDRecommender(model, factorizer);
        }

        return null;
      }
    };

    int users = usersId.size();
    double sumP = 0, sumR = 0, sumRmse = 0, sumMae = 0;
    Recommender rec = recommenderBuilder.buildRecommender(this.model);

    for (int i = 0; i < usersId.size(); i++) {
      long userId = usersId.get(i);

      List<RecommendedItem> recs = rec.recommend(userId, numberOfRecommendation);
      if (recs.isEmpty()) {
        addOutput("No Recommendations with " + type + "!\n");
      } else {
        int cont = 0;
        addOutput("Items Recommended for user " + userId + " with " + type + ":");
        for (RecommendedItem r : recs) {
          addOutput("- " + r.getItemID() + " preference predicted: " + r.getValue());
          cont++;
        }

        IRStatistics stats = irStats.evaluate(recommenderBuilder, null, this.model, null, cont, GenericRecommenderIRStatsEvaluator.CHOOSE_THRESHOLD, 1.0);

        // Use 90% of the data to train; test using the other 30%.
        double r = rms.evaluate(recommenderBuilder, null, model, 0.9, 1.0);
        double m = mae.evaluate(recommenderBuilder, null, model, 0.9, 1.0);

        sumRmse += r;
        sumMae += m;
        sumP += toSecureDouble(stats.getPrecision());
        sumR += toSecureDouble(stats.getRecall());

        addOutput(" Precision@" + userId + ": " + DF.format(toSecureDouble(stats.getPrecision()))
                + " Recall@" + userId + ": " + DF.format(toSecureDouble(stats.getRecall()))
                + " RMSE@" + userId + ": " + DF.format(r)
                + " MAE@" + userId + ": " + DF.format(m) + "\n");
      }
    }

    if (users < 2) {
      return;
    }

    addOutput("MAP: " + DF.format(sumP / users)
            + " MAR: " + DF.format(sumR / users)
            + " AVG RMSE: " + DF.format(sumRmse / users)
            + " AVG MAE: " + DF.format(sumMae / users) + "\n");
  }

  private void setUserDetails() {
    spNumOfUser.setModel(new javax.swing.SpinnerNumberModel(1, 1, userIds.size(), 1));
    cbRecommendationsToUser.removeAllItems();
    cbRecommendationsToUser.addItem("All Users");
    Iterator<Long> it = userIds.iterator();
    while (it.hasNext()) {
      Long id = it.next();
      cbRecommendationsToUser.addItem(id);
    }
  }

  private void btRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRunActionPerformed
    try {
      //Model      
      if (cbModel.getSelectedItem().equals(FileDataModel.class.getSimpleName())) {
        File f = new File(tfModelFile.getText());
        if (!f.exists()) {
          JOptionPane.showMessageDialog(null, "File Not Found!");
          return;
        }
        if (rbUserBased.isSelected() || rbItemBased.isSelected() || rbSVD.isSelected()) {
          this.model = new FileDataModel(f);
        } else if (rbBooleanUser.isSelected() || rbBooleanItem.isSelected()) {
          this.model = new GenericBooleanPrefDataModel(new FileDataModel(f));
        }
      } else if (cbModel.getSelectedItem().equals(HibernateDataModel.class.getSimpleName())) {
        this.model = new HibernateDataModel(configDB);
      }

      //User params
      List<Long> usersId = new ArrayList<>();
      if (cbRecommendationsToUser.getSelectedItem().getClass().equals(String.class)) {
        usersId.addAll(userIds);
      } else {
        usersId.add((long) cbRecommendationsToUser.getSelectedItem());
      }
      int NumOfRec = slNumOfRecomendations.getValue();

      //Nearest Neighborhood
      if (rbItemBased.isSelected() || rbBooleanItem.isSelected()) {
        //Similarity       
        if (cbSimilarity.getSelectedItem().equals(LogLikelihoodSimilarity.class.getSimpleName())) {
          this.is = new LogLikelihoodSimilarity(model);
        } else if (cbSimilarity.getSelectedItem().equals(PearsonCorrelationSimilarity.class.getSimpleName())) {
          this.is = new PearsonCorrelationSimilarity(model);
        } else if (cbSimilarity.getSelectedItem().equals(SpearmanCorrelationSimilarity.class.getSimpleName())) {
          ///this.is = new SpearmanCorrelationSimilarity(model);
        } else if (cbSimilarity.getSelectedItem().equals(TanimotoCoefficientSimilarity.class.getSimpleName())) {
          this.is = new TanimotoCoefficientSimilarity(model);
        } else if (cbSimilarity.getSelectedItem().equals(CityBlockSimilarity.class.getSimpleName())) {
          this.is = new CityBlockSimilarity(model);
        } else if (cbSimilarity.getSelectedItem().equals(EuclideanDistanceSimilarity.class.getSimpleName())) {
          this.is = new EuclideanDistanceSimilarity(model);
        } else if (cbSimilarity.getSelectedItem().equals(UncenteredCosineSimilarity.class.getSimpleName())) {
          this.is = new UncenteredCosineSimilarity(model);
        }

        if (rbItemBased.isSelected()) {
          performRecommendation(usersId, NumOfRec, "Item-Based");
        } else if (rbBooleanItem.isSelected()) {
          performRecommendation(usersId, NumOfRec, "Boolean Item-Based");
        }
        jTabbedPane1.setSelectedIndex(2);
        pnResults.grabFocus();
      } else if (rbUserBased.isSelected() || rbBooleanUser.isSelected()) {
        //Similarity       
        if (cbSimilarity.getSelectedItem().equals(LogLikelihoodSimilarity.class.getSimpleName())) {
          this.us = new LogLikelihoodSimilarity(model);
        } else if (cbSimilarity.getSelectedItem().equals(PearsonCorrelationSimilarity.class.getSimpleName())) {
          this.us = new PearsonCorrelationSimilarity(model);
        } else if (cbSimilarity.getSelectedItem().equals(SpearmanCorrelationSimilarity.class.getSimpleName())) {
          this.us = new SpearmanCorrelationSimilarity(model);
        } else if (cbSimilarity.getSelectedItem().equals(TanimotoCoefficientSimilarity.class.getSimpleName())) {
          this.us = new TanimotoCoefficientSimilarity(model);
        } else if (cbSimilarity.getSelectedItem().equals(CityBlockSimilarity.class.getSimpleName())) {
          this.us = new CityBlockSimilarity(model);
        } else if (cbSimilarity.getSelectedItem().equals(EuclideanDistanceSimilarity.class.getSimpleName())) {
          this.us = new EuclideanDistanceSimilarity(model);
        } else if (cbSimilarity.getSelectedItem().equals(UncenteredCosineSimilarity.class.getSimpleName())) {
          this.us = new UncenteredCosineSimilarity(model);
        }

        if (cbNN.getSelectedItem().equals(NearestNUserNeighborhood.class.getSimpleName())) {
          int n = (int) spNumOfUser.getValue();
          this.neighbour = new NearestNUserNeighborhood(n, us, model);
        } else if (cbNN.getSelectedItem().equals(ThresholdUserNeighborhood.class.getSimpleName())) {
          double t = (double) (slThreshold.getValue() / 100);
          this.neighbour = new ThresholdUserNeighborhood(t, us, model);
        }

        if (rbUserBased.isSelected()) {
          performRecommendation(usersId, NumOfRec, "User-Based");
        } else if (rbBooleanUser.isSelected()) {
          performRecommendation(usersId, NumOfRec, "Boolean User-Based");
        }
        jTabbedPane1.setSelectedIndex(2);
        pnResults.grabFocus();
      } else if (rbSVD.isSelected()) {
        int f = (int) spFeatures.getValue();
        int i = (int) spInterations.getValue();
        double lambda = (double) (slThreshold.getValue() / 100);
        this.factorizer = new ALSWRFactorizer(model, f, 0.065, i);

        performRecommendation(usersId, NumOfRec, "SVD");
        jTabbedPane1.setSelectedIndex(2);
        pnResults.grabFocus();
      }
    } catch (Exception ex) {
      Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
      JOptionPane.showMessageDialog(null, ex.getMessage());
    }
  }//GEN-LAST:event_btRunActionPerformed

  private void btFindFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFindFileActionPerformed
    try {
      JFileChooser abrir = new JFileChooser();
      abrir.setFileFilter(new FileNameExtensionFilter("CSV File", "csv"));
      int retorno = abrir.showOpenDialog(null);
      if (retorno != JFileChooser.APPROVE_OPTION) {
        return;
      }

      tfModelFile.setText(abrir.getSelectedFile().getAbsolutePath());
      userIds.clear();
      String arq = FileUtils.readFileToString(abrir.getSelectedFile(), "UTF-8");
      String[] linha = arq.split("\n");

      int colunns = linha[0].split(",").length;
      if (colunns == 2) { //Boolean
        coluns = new String[]{"User ID", "Item ID"};
        data = new Object[linha.length][2];
        types = new Class[]{java.lang.Integer.class, java.lang.Integer.class};
        canEdit = new boolean[]{false, false};
      } else if (colunns == 3) {
        coluns = new String[]{"User ID", "Item ID", "Preference"};
        data = new Object[linha.length][3];
        types = new Class[]{java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class};
        canEdit = new boolean[]{false, false, false};
      }

      for (int i = 0; i < linha.length; i++) {
        String linha1 = linha[i];
        String[] col = linha1.split(",");

        if ((col.length < 2) || (col.length > 3)) {
          return;
        }

        Long userId = Long.parseLong(col[0]);
        if (!userIds.contains(userId)) {
          userIds.add(userId);
        }

        data[i][0] = userId;
        data[i][1] = Long.parseLong(col[1]);
        if (col.length == 3) {
          data[i][2] = Double.parseDouble(col[2]);
        }
      }

      setUserDetails();
      tbPreferences.setModel(new javax.swing.table.DefaultTableModel(data, coluns) {

        @Override
        public Class getColumnClass(int columnIndex) {
          return types[columnIndex];
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
          return canEdit[columnIndex];
        }
      });
    } catch (IOException ex) {
      Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
      JOptionPane.showMessageDialog(null, ex.getMessage());
    }
  }//GEN-LAST:event_btFindFileActionPerformed

  private void cbNNItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbNNItemStateChanged
    spNumOfUser.setVisible(false);
    lbNumOfUsers.setVisible(false);

    slThreshold.setVisible(false);
    lbThreshold.setVisible(false);

    if (!cbNN.isEnabled()) {
      return;
    }

    if (cbNN.getSelectedItem().equals(NearestNUserNeighborhood.class.getSimpleName())) {
      spNumOfUser.setVisible(true);
      lbNumOfUsers.setVisible(true);
    } else if (cbNN.getSelectedItem().equals(ThresholdUserNeighborhood.class.getSimpleName())) {
      slThreshold.setVisible(true);
      lbThreshold.setVisible(true);
    }
  }//GEN-LAST:event_cbNNItemStateChanged

  private void updateConfig(java.awt.event.ItemEvent evt) {
    //disable all
    lbSimilarity.setVisible(false);
    cbSimilarity.setVisible(false);

    lbNN.setVisible(false);
    cbNN.setVisible(false);
    cbNNItemStateChanged(evt);

    lbNumOfUsers.setVisible(false);
    spNumOfUser.setVisible(false);

    lbThreshold.setVisible(false);
    slThreshold.setVisible(false);

    lbFeatures.setVisible(false);
    spFeatures.setVisible(false);

    lbInterations.setVisible(false);
    spInterations.setVisible(false);

    lbLambda.setVisible(false);

    //enable acording to option
    if (rbUserBased.isSelected() || rbBooleanUser.isSelected()) {
      cbNN.setVisible(true);
      lbNN.setVisible(true);
      cbNNItemStateChanged(evt);

      cbSimilarity.removeAllItems();
      cbSimilarity.addItem(LogLikelihoodSimilarity.class.getSimpleName());
      cbSimilarity.addItem(PearsonCorrelationSimilarity.class.getSimpleName());
      cbSimilarity.addItem(SpearmanCorrelationSimilarity.class.getSimpleName());//Just to Item-based
      cbSimilarity.addItem(TanimotoCoefficientSimilarity.class.getSimpleName());
      cbSimilarity.addItem(CityBlockSimilarity.class.getSimpleName());
      cbSimilarity.addItem(EuclideanDistanceSimilarity.class.getSimpleName());
      cbSimilarity.addItem(UncenteredCosineSimilarity.class.getSimpleName());

      lbSimilarity.setVisible(true);
      cbSimilarity.setVisible(true);
    } else if (rbItemBased.isSelected() || rbBooleanItem.isSelected()) {
      cbNNItemStateChanged(evt);

      cbSimilarity.removeAllItems();
      cbSimilarity.addItem(LogLikelihoodSimilarity.class.getSimpleName());
      cbSimilarity.addItem(PearsonCorrelationSimilarity.class.getSimpleName());
      //cbSimilarity.addItem(SpearmanCorrelationSimilarity.class.getSimpleName());//Just to Item-based
      cbSimilarity.addItem(TanimotoCoefficientSimilarity.class.getSimpleName());
      cbSimilarity.addItem(CityBlockSimilarity.class.getSimpleName());
      cbSimilarity.addItem(EuclideanDistanceSimilarity.class.getSimpleName());
      cbSimilarity.addItem(UncenteredCosineSimilarity.class.getSimpleName());

      lbSimilarity.setVisible(true);
      cbSimilarity.setVisible(true);
    } else if (rbSVD.isSelected()) {
      lbFeatures.setVisible(true);
      spFeatures.setVisible(true);

      lbInterations.setVisible(true);
      spInterations.setVisible(true);

      lbLambda.setVisible(true);
    }
  }
  private void rbUserBasedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbUserBasedItemStateChanged
    updateConfig(evt);
  }//GEN-LAST:event_rbUserBasedItemStateChanged

  private void rbItemBasedItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbItemBasedItemStateChanged
    updateConfig(evt);
  }//GEN-LAST:event_rbItemBasedItemStateChanged

  private void getDataFromDB() throws Exception {
    userIds.clear();
    coluns = new String[]{"User ID", "Item ID", "Preference"};

    Session s = null;
    Transaction t = null;
    List<Object[]> lista = null;

    try {
      s = HibernateUtil.getSessionFactory(this.configDB).openSession();
      t = s.beginTransaction();
      //t.begin();
      NativeQuery q = s.createNativeQuery("select "
              + this.configDB.getUser_id() + " , "//as userId
              + this.configDB.getItem_id() + " , "//as itemId
              + this.configDB.getPref() + "  "//as preference
              + " from " + this.configDB.getTable() + "  "//as Preferences
              + " order by 1"); //Important
      lista = q.setCacheable(true).list();

      data = new Object[lista.size()][3];

      for (int x = 0; x < lista.size(); x++) {
        Object[] o = lista.get(x);

        if (o.length != 3) {
          return;
        }

        BigInteger u = (BigInteger) o[0];
        BigInteger i = (BigInteger) o[1];
        float pref = (float) o[2];

        Long userId = u.longValue();
        if (!userIds.contains(userId)) {
          userIds.add(userId);
        }

        data[x][0] = u.longValue();
        data[x][1] = i.longValue();
        data[x][2] = pref;
      }

      t.commit();
    } catch (HibernateException e) {
      if ((t != null) && (t.isActive())) {
        t.rollback();
      }
      throw e;
    } finally {
      if ((s != null) && (s.isConnected())) {
        s.close();
      }
    }

    setUserDetails();
    tbPreferences.setModel(new javax.swing.table.DefaultTableModel(data, coluns) {
      Class[] types = new Class[]{java.lang.Long.class, java.lang.Long.class, java.lang.Float.class};
      boolean[] canEdit = new boolean[]{false, false, false};

      @Override
      public Class getColumnClass(int columnIndex) {
        return types[columnIndex];
      }

      @Override
      public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit[columnIndex];
      }
    });
  }

  private void cbModelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbModelItemStateChanged
    if (evt.getStateChange() != ItemEvent.SELECTED) {
      return;
    }

    try {
      if (evt.getItem().equals(FileDataModel.class.getSimpleName())) {

      } else if (evt.getItem().equals(HibernateDataModel.class.getSimpleName())) {
        new FrmDB(configDB).setVisible(true);
        getDataFromDB();
        setUserDetails();
      }
    } catch (Exception ex) {
      Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
    }
  }//GEN-LAST:event_cbModelItemStateChanged

  private void rbSVDItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbSVDItemStateChanged
    updateConfig(evt);
  }//GEN-LAST:event_rbSVDItemStateChanged

  private void rbBooleanUserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbBooleanUserItemStateChanged
    updateConfig(evt);
  }//GEN-LAST:event_rbBooleanUserItemStateChanged

  private void rbBooleanItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbBooleanItemItemStateChanged
    updateConfig(evt);
  }//GEN-LAST:event_rbBooleanItemItemStateChanged

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Windows".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
        if ("GTK+".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
      JOptionPane.showMessageDialog(null, ex.getMessage());
      Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
    }

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new FrmMain().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btFindFile;
  private javax.swing.JButton btRun;
  private javax.swing.ButtonGroup buttonGroup1;
  private javax.swing.JComboBox cbModel;
  private javax.swing.JComboBox cbNN;
  private javax.swing.JComboBox<Object> cbRecommendationsToUser;
  private javax.swing.JComboBox cbSimilarity;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JTabbedPane jTabbedPane1;
  private javax.swing.JLabel lbFeatures;
  private javax.swing.JLabel lbInterations;
  private javax.swing.JLabel lbLambda;
  private javax.swing.JLabel lbNN;
  private javax.swing.JLabel lbNumOfUsers;
  private javax.swing.JLabel lbSimilarity;
  private javax.swing.JLabel lbThreshold;
  private javax.swing.JLayeredPane pnDataModel;
  private javax.swing.JLayeredPane pnOptions;
  private javax.swing.JLayeredPane pnResults;
  private javax.swing.JRadioButton rbBooleanItem;
  private javax.swing.JRadioButton rbBooleanUser;
  private javax.swing.JRadioButton rbItemBased;
  private javax.swing.JRadioButton rbSVD;
  private javax.swing.JRadioButton rbUserBased;
  private javax.swing.JSlider slNumOfRecomendations;
  private javax.swing.JSlider slThreshold;
  private javax.swing.JSpinner spFeatures;
  private javax.swing.JSpinner spInterations;
  private javax.swing.JSpinner spNumOfUser;
  private javax.swing.JTextArea taOutput;
  private javax.swing.JTable tbPreferences;
  private javax.swing.JTextField tfModelFile;
  // End of variables declaration//GEN-END:variables
}
